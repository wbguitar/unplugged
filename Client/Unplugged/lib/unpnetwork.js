// Generated by CoffeeScript 1.7.1
(function() {
  window.UnpModule = (function() {
    function UnpModule(modName) {
      this.modName = modName;
      console.log(this.modName);
      window.ModuleList[this.modName] = this;
    }

    UnpModule.prototype.handleAction = function(actionName, actionData) {};

    return UnpModule;

  })();

  window.UnpMessage = (function() {
    function UnpMessage() {
      this.actionList = [];
    }

    UnpMessage.prototype.addAction = function(modName, actionName, actionData) {
      return this.actionList.push({
        'module': modName,
        'action': actionName,
        'data': actionData
      });
    };

    UnpMessage.prototype.send = function() {
      var msg;
      msg = {};
      msg.unp = this.actionList;
      return window.BaseWebSocket.send(JSON.stringify(msg));
    };

    return UnpMessage;

  })();

  window.UnpInit = (function() {
    function UnpInit() {
      var _socketOpen;
      UnpWarning.LoadingSplashShow();
      $('body').addClass('unp-connection-closed');
      window.ModuleList = {};
      window.BaseWebSocket = new WebSocket(window.ServerUrl);
      _socketOpen = false;
      window.BaseWebSocket.onopen = function() {
        console.log('');
        UnpWarning.LoadingSplashHide();
        console.log('Connection to ' + window.ServerUrl + ' is open');
        _socketOpen = true;
        return $('body').addClass('unp-connection-open').removeClass('unp-connection-closed');
      };
      window.BaseWebSocket.onerror = function(evt) {
        return console.log("Error");
      };
      window.BaseWebSocket.onmessage = function(evt) {
        var module, _cAction, _cUnpMessage, _i, _len, _objMessage, _recMessage, _ref, _results;
        _recMessage = evt.data;
        console.log("Message received: " + _recMessage);
        _objMessage = $.parseJSON(_recMessage);
        _cUnpMessage = new UnpMessage();
        _ref = _objMessage.unp;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          _cAction = _ref[_i];
          module = window.ModuleList[_cAction.module];
          _results.push(module.handleAction(_cAction.action, _cAction.data));
        }
        return _results;
      };
      window.BaseWebSocket.onclose = function() {
        console.log('Connection to ' + window.ServerUrl + ' is closed');
        $('body').removeClass('unp-connection-open').addClass('unp-connection-closed');
        if (!_socketOpen) {
          UnpWarning.LoadingSplashHide();
        }
        _socketOpen = false;
        return UnpWarning.Alert('Connection to server failed. Press "OK" to try again.', function() {
          return document.location.reload();
        });
      };
      window.BaseWebSocket._sendBASE = window.BaseWebSocket.send;
      window.BaseWebSocket.send = function(sendMessage) {
        console.log('Sending message: ' + sendMessage);
        return window.BaseWebSocket._sendBASE(sendMessage);
      };
    }

    return UnpInit;

  })();

}).call(this);

//# sourceMappingURL=unpnetwork.map
